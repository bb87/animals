// Generated by CoffeeScript 1.7.1
(function() {
  var Deferred, app, cheerio, config, currentDirectory, directories, express, fs, htmlEndpoint, http, lowerSlug, makeAnEndpoint, markdown, markdownEndpoint, path, prettyHTML, promise, root, show404, slug, stylus, useragent, views, writeAStaticPage, _;

  _ = require('lodash');

  express = require('express.io');

  http = require('http');

  prettyHTML = require('js-beautify').html;

  stylus = require('stylus');

  fs = require('fs');

  path = require('path');

  markdown = require('markdown').markdown;

  useragent = require('express-useragent');

  promise = require('promised-io/promise');

  Deferred = promise.Deferred;

  cheerio = require('cheerio');

  slug = require('slug');

  process.on("uncaughtException", function(finalError) {
    if (!_.isNull(finalError)) {
      console.warn("MEGA ERROR", finalError.stack, finalError.msg);
      throw finalError;
    }
  });

  currentDirectory = process.cwd();

  config = {
    title: 'HTML-APP',
    env: "development",
    port: process.env.PORT || 4567,
    directories: {
      root: currentDirectory,
      "public": '/build/public',
      build: '/build',
      docs: '/build/public/docs',
      views: '/views',
      vendor: '/vendor',
      assets: '/assets'
    },
    constants: {
      SECRET: 'hjs9H45KJHDSILdlkjJhfDgo4ihJ497o9IhuGswlkjhdfglkhudf',
      KEY: '84IUSIOlighlsSFRYDkd3Sjd9Dg84li86DuDxil',
      COOKIE_LIFETIME: 1800000
    }
  };

  directories = {};

  root = config.directories.root;

  views = config.directories.views;

  directories.views = root + '' + views;

  directories.vendor = root + '' + config.directories.vendor;

  directories["public"] = root + '' + config.directories["public"];

  directories.assets = root + '' + config.directories.assets;

  app = express().http().io();

  app.set('env', config.env);

  app.set('views', directories.views);

  app.set('view engine', 'jade');

  app.use(useragent.express());

  app.use(express["static"](directories["public"]));

  app.use(express.cookieParser());

  app.use(express.json());

  app.use(express.urlencoded());

  app.use(express.session({
    cookie: {
      maxAge: config.constants.COOKIE_LIFETIME
    },
    secret: config.constants.SECRET,
    key: config.constants.KEY
  }));

  show404 = function(req, res, err) {
    if (err) {
      console.log(req.method, req.url, err);
    }
    return res.render('404', {
      url: req.url
    }, function(err, html) {
      if (err) {
        res.send(500, err);
        return;
      }
      res.send(html);
    });
  };

  app.use(app.router);

  app.use(function(req, res, next) {
    return show404(req, res);
  });

  app.use(function(err, req, res, next) {
    if (err) {
      console.log("final error stack!", err.stack);
      return res.send(500, "The machine is sick.");
    }
  });

  app.locals({
    title: config.title
  });

  writeAStaticPage = function(url, view, stuff, outputLocation) {
    if (stuff == null) {
      stuff = false;
    }
    if (outputLocation == null) {
      outputLocation = false;
    }
    return app.get(url, function(req, res) {
      var options;
      options = {
        layout: false
      };
      if (_.isObject(stuff)) {
        _(stuff).keys().each(function(key) {
          return options[key] = stuff[key];
        });
      }
      return res.render(view, options, function(err, html) {
        if (err) {
          show404(req, res, err);
          return;
        }
        if (outputLocation) {
          phil.write(outputLocation, prettyHTML(html), function() {
            console.log("Wrote static HTML content to " + outputLocation + ".");
            return res.send(html);
          });
        }
      });
    });
  };

  makeAnEndpoint = function(url, view, stuff) {
    if (stuff == null) {
      stuff = false;
    }
    return app.get(url, function(req, res) {
      var displayFailures, options;
      options = {
        layout: false
      };
      displayFailures = false;
      if (_.isObject(stuff)) {
        _(stuff).keys().each(function(key) {
          if (key === 'showfail') {
            return displayFailures = true;
          } else {
            return options[key] = stuff[key];
          }
        });
      }
      return res.render(view, options, function(err, html) {
        if (err) {
          if (!displayFailures) {
            show404(req, res, err);
          } else {
            console.log(err, "Error during page render.");
            throw err;
          }
          return;
        }
        res.send(html);
      });
    });
  };

  htmlEndpoint = function(url, view) {
    return app.get(url, function(req, res) {
      fs.readFile(view, 'utf8', function(err, html) {
        if (err) {
          console.log(err);
          throw err;
        }
        res.send(html);
      });
    });
  };

  markdownEndpoint = function(url, file, transformFunction) {
    if (transformFunction == null) {
      transformFunction = function(html, cb) {
        return cb(html);
      };
    }
    app.get(url, function(req, res) {
      fs.readFile(file, 'utf8', function(err, html) {
        if (err) {
          console.log(err);
          throw err;
        }
        transformFunction(markdown.toHTML(html), function(transformed) {
          return res.send(transformed);
        });
      });
    });
  };

  lowerSlug = function(x) {
    var parts, text;
    if (_.isString(x)) {
      text = slug(x).toLowerCase();
      parts = text.split('-');
      if (parts.length > 5) {
        parts = parts.slice(0, 5);
        text = parts.join('-');
      }
      return text;
    }
  };

  makeAnEndpoint('/', 'index');

  console.log("Running a server on localhost:" + config.port);

  app.listen(config.port);

  module.exports = app;

}).call(this);
