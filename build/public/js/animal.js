// Generated by CoffeeScript 1.7.1
(function() {
  var Animal, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = window._;

  Animal = (function(_super) {
    __extends(Animal, _super);

    function Animal() {
      this.die = __bind(this.die, this);
      this.move = __bind(this.move, this);
      this.mate = __bind(this.mate, this);
      this.shit = __bind(this.shit, this);
      this.eat = __bind(this.eat, this);
      this._log = __bind(this._log, this);
      return Animal.__super__.constructor.apply(this, arguments);
    }

    Animal.prototype.initialize = function() {
      this.set('id', _.uniqueId(this.get('type') + '-'));
      return this;
    };

    Animal.prototype.defaults = function() {
      return {
        type: 'animal',
        lifetime: 1000
      };
    };

    Animal.prototype._log = function() {
      var id;
      id = this.get('id');
      return console.log.apply(console, [id].concat(_.toArray(arguments)));
    };

    Animal.prototype.eat = function() {
      var self;
      self = this;
      self._log("I am eating");
      return self;
    };

    Animal.prototype.shit = function() {
      var self;
      self = this;
      self._log("I am shitting");
      return self;
    };

    Animal.prototype.mate = function(anotherThing) {
      var self;
      self = this;
      self._log("I am mating with ", anotherThing);
      if (anotherThing instanceof Animal) {
        self._log("I can mate with this!");
      }
      return self;
    };

    Animal.prototype.move = function() {
      var self;
      self = this;
      self._log("I am moving");
      return self;
    };

    Animal.prototype.die = function() {
      var self;
      self = this;
      self._log("I am dying");
      return self;
    };

    return Animal;

  })(Backbone.Model);

  window.Animal = Animal;

}).call(this);
